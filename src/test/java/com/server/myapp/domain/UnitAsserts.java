package com.server.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class UnitAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUnitAllPropertiesEquals(Unit expected, Unit actual) {
        assertUnitAutoGeneratedPropertiesEquals(expected, actual);
        assertUnitAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUnitAllUpdatablePropertiesEquals(Unit expected, Unit actual) {
        assertUnitUpdatableFieldsEquals(expected, actual);
        assertUnitUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUnitAutoGeneratedPropertiesEquals(Unit expected, Unit actual) {
        assertThat(expected)
            .as("Verify Unit auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUnitUpdatableFieldsEquals(Unit expected, Unit actual) {
        assertThat(expected)
            .as("Verify Unit relevant properties")
            .satisfies(e -> assertThat(e.getUnitCode()).as("check unitCode").isEqualTo(actual.getUnitCode()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getAddress()).as("check address").isEqualTo(actual.getAddress()))
            .satisfies(e -> assertThat(e.getLogoUrl()).as("check logoUrl").isEqualTo(actual.getLogoUrl()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getFax()).as("check fax").isEqualTo(actual.getFax()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUnitUpdatableRelationshipsEquals(Unit expected, Unit actual) {
        assertThat(expected)
            .as("Verify Unit relationships")
            .satisfies(e -> assertThat(e.getParentUnit()).as("check parentUnit").isEqualTo(actual.getParentUnit()));
    }
}
